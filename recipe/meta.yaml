{% set version = "1.2.0" %}
package:
  name: zenoh-split
  version: {{ version }}

source:
  - url: https://github.com/eclipse-zenoh/zenoh/archive/refs/tags/{{ version }}.tar.gz
    sha256: 64401b187380beb586014cc8bd76d611b07fd9fc6c2e66fed1eea4b38543b4e0

build:
  number: 0

outputs:
  # This is just a meta packages used to capture the exact version of zenoh (to which a unique Cargo.lock
  # used for all dependencies is associated) and the rust compiler version used, to capture the exacti ABI
  # of the zenoh plugins, and ensure that at runtime incompatible zenohd and plugins are never installed.
  - name: zenoh-rust-abi
    version: {{ version }}.{{ rust_compiler_version }}
    script: build_zenoh_rust_abi.sh  # [unix]
    script: bld_zenoh_rust_abi.bat  # [win]
    build:
      run_exports:
        - {{ pin_subpackage('zenoh-rust-abi', max_pin='x.x.x.x.x.x') }}
    requirements:
      build:
        # In theory this is not necessary, but we exploit the fact that this is the first
        # package built to generate the THIRDPARTY.yml file
        - {{ compiler('rust') }}
        - {{ stdlib('c') }}
        - cargo-bundle-licenses
    test:
      commands:
        - echo "Metapackage, no test required"

  - name: zenohd
    script: build_zenohd.sh  # [unix]
    script: bld_zenohd.bat  # [win]
    requirements:
      build:
        - {{ compiler('rust') }}
        - {{ stdlib('c') }}
        # required as on Linux unwind's rust functionality depends on gcc_s library
        - {{ compiler('c') }}
      host:
        - zenoh-rust-abi {{ version }}.{{ rust_compiler_version }}
    test:
      commands:
        - test -f ${PREFIX}/bin/zenohd  # [unix]
        - if not exist %PREFIX%\\Library\\bin\\zenohd.exe exit 1  # [win]

  - name: zenoh-plugin-rest
    script: build_zenoh_plugin_rest.sh  # [unix]
    script: bld_zenoh_plugin_rest.bat  # [win]
    requirements:
      build:
        - {{ compiler('rust') }}
        - {{ stdlib('c') }}
        # required as on Linux unwind's rust functionality depends on gcc_s library
        - {{ compiler('c') }}
      host:
        - zenoh-rust-abi {{ version }}.{{ rust_compiler_version }}
    test:
      commands:
        - test -f ${PREFIX}/lib/libzenoh_plugin_rest${SHLIB_EXT}  # [unix]
        - if not exist %PREFIX%\\Library\\bin\\zenoh_plugin_rest.dll exit 1  # [win]

  - name: zenoh-plugin-storage-manager
    script: build_zenoh_plugin_storage_manager.sh  # [unix]
    script: bld_zenoh_plugin_storage_manager.bat  # [win]
    requirements:
      build:
        - {{ compiler('rust') }}
        - {{ stdlib('c') }}
        # required as on Linux unwind's rust functionality depends on gcc_s library
        - {{ compiler('c') }}
      host:
        - zenoh-rust-abi {{ version }}.{{ rust_compiler_version }}
    test:
      commands:
        - test -f ${PREFIX}/lib/libzenoh_plugin_storage_manager${SHLIB_EXT}  # [unix]
        - if not exist %PREFIX%\\Library\\bin\\zenoh_plugin_storage_manager.dll exit 1  # [win]

  # The zenoh meta package is present in Debian and homebrew official packages and as of June 2024
  # depends on zenohd, zenoh-plugin-rest and zenoh-plugin-storage-manager, if this changes in the future we need to keep aligned
  # see https://github.com/eclipse-zenoh/homebrew-zenoh/blob/e29d4ac6b6848234ca596aaa1a2cce2090c43513/zenoh.rb#L9-L11
  # https://github.com/eclipse-zenoh/homebrew-zenoh/blob/e29d4ac6b6848234ca596aaa1a2cce2090c43513/README.md#available-formulae
  - name: zenoh
    requirements:
      run:
        - {{ pin_subpackage('zenohd', exact=True) }}
        - {{ pin_subpackage('zenoh-plugin-rest', exact=True) }}
        - {{ pin_subpackage('zenoh-plugin-storage-manager', exact=True) }}
    test:
      commands:
        - test -f ${PREFIX}/bin/zenohd  # [unix]
        - if not exist %PREFIX%\\Library\\bin\\zenohd.exe exit 1  # [win]

about:
  home: https://zenoh.io/
  license: Apache-2.0 OR EPL-2.0
  license_file:
    - LICENSE
    - THIRDPARTY.yml
  summary: zenoh unifies data in motion, data in-use, data at rest and computations. It carefully blends traditional pub/sub with geo-distributed storages, queries and computations, while retaining a level of time and space efficiency that is well beyond any of the mainstream stacks.

extra:
  feedstock-name: zenoh
  recipe-maintainers:
    - traversaro
